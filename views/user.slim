- content_for :head do
  title tischler.io/#{@userName}
  link rel="stylesheet" type="text/css" href="/stylesheets/user.css"
  link rel="stylesheet" type="text/css" href="/stylesheets/dark.css"

- content_for :body do
  #content
    img#picture.portrait src=gravatar_url(@user[:email], :size => 400)
    #text
      h1= @user[:fullName]
      #tabs
        ul#tab-header style="display: none;"
          li
            a href="#about" About
          li
            a href="#contact" Contact
        #about
          p= @user[:about]
        #contact
          table#contact-list
            tbody data-bind="foreach: contacts"
              tr
                td.label data-bind="text: label"
                td
                  a data-bind="attr: { href: link }, text: text"
          ul#contact-buttons data-bind="foreach: buttons"
            li
              a data-bind="css: 'fc-webicon ' + type, attr: { href: link }, text: text"

    #footer style="clear: both;"

- content_for :footer do
  script src="http://code.jquery.com/jquery-1.8.3.js"
  script src="http://cdnjs.cloudflare.com/ajax/libs/knockout/2.2.0/knockout-min.js"
  script src="/scripts/jquery-ui-custom.js"
  javascript:
    $(function () {
      $("#tabs").tabs();
      $("#tab-header").show();
            
      var ViewModel = function() {
        var self = this;
        
        self.contacts = ko.observableArray();
        self.buttons = ko.observableArray();

        var add = function (collection, value, type, label, link, text) {
          if (value !== undefined) {
            collection.push({
              value: value,
              type: type,
              label: label,
              link: link instanceof Function ? link(value) : link,
              text: text instanceof Function ? text(value) : (text ? text : value)
            });
          }

          return self;
        };

        self.addContact = function (value, type, label, link, text) {
          return add(self.contacts, value, type, label, link, text);
        };

        self.addButton = function (value, type, label, link, text) {
          return add(self.buttons, value, type, label, link, text);
        };
      };

      var schemeLink = function(scheme, value) { return scheme + ':' + value; };
      var rawLink = function(value) { return value; };
      var mailtoLink = function(value) { return schemeLink('mailto', value); };
      var calltoLink = function(value) { return schemeLink('callto', value.replace(/ /g, '')); };
      var skypeLink = function(value) { return schemeLink('skype', value); };
      var facebookLink = function(value) { return 'https://www.facebook.com/' + value; };
      var stackoverflowLink = function(value) { return 'https://www.stackoverflow.com/users/' + value; };
      var xingLink = function(value) { return 'https://www.xing.com/profile/' + value; };
      var githubLink = function(value) { return 'https://www.github.com/' + value; };

      var viewModel = new ViewModel();
      ko.applyBindings(viewModel);

      $.get('david.json', function(data) {
        viewModel
          .addContact(data.email, 'mail', 'E-Mail', mailtoLink)
          .addContact(data.phone, 'phone', 'Phone', calltoLink)
          .addContact(data.web, 'web', 'Web', rawLink)
          .addButton(data.vcfUrl, 'vcard', 'vCard', rawLink)
          .addButton(data.skype, 'skype', 'Skype', skypeLink)
          .addButton(data.facebook, 'facebook', 'Facebook', facebookLink)
          .addButton(data.xing, 'xing', 'Xing', xingLink)
          .addButton(data.stackoverflow, 'stackoverflow', 'Stack Overflow', stackoverflowLink)
          .addButton(data.github, 'github', 'GitHub', githubLink);
      });
    });